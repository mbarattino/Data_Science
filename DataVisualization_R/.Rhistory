args.legend = list(
x = "topleft",
title = "Awards"))
# Create a contingency table
# NOTE: x and y are correct
awards <- table(
movies$Rating,
movies$Award)
colnames(awards) <- c("No", "Yes")
print(awards)
# Create a spineplot
spineplot(
x = awards,
main = "Proportion of Movies by Rating and Awards",
xlab = "Rating",
ylab = "Awards")
# Create a mosaic plot
mosaicplot(
x = awards,
main = "Proportion of Movies by Rating and Awards",
xlab = "Rating",
ylab = "Awards")
# Create a grouped frequency bar chart
barchart(
x = awards,
stack = FALSE,
horizontal = FALSE,
main = "Count of Movies by Rating and Awards",
xlab = "Rating",
ylab = "Count of Movies",
auto.key = list(
x = 0.05,
y = 0.95,
title = "Awards",
text = c("No", "Yes")))
# Create a stacked frequency bar chart
barchart(
x = awards,
stack = TRUE,
horizontal = FALSE,
main = "Count of Movies by Rating and Award",
xlab = "Rating",
ylab = "Count of Movies",
auto.key = list(
x = 0.05,
y = 0.95,
title = "Awards",
text = c("No", "Yes")))
# Create a proportional frequency table
matrix <- apply(awards, 1, function(x) {x / sum(x) })
proportions <- t(matrix) # transpose matrix
head(awards)
head(proportions)
# Create a 100% stacked frequency bar chart
barchart(
x = proportions,
stack = TRUE,
horizontal = FALSE,
main = "Proportion of Movies by Rating and Award",
xlab = "Rating",
ylab = "Proportion of Movies",
auto.key = list(
x = 0.70,
y = 1.05,
title = "Awards",
columns = 2,
text = c("No", "Yes"),
background = "white"))
# NOTE: No spine plot or mosaic plot in lattice
# Create a grouped frequency bar chart
ggplot(
data = movies,
aes(x = Rating, fill = Awards)) +
geom_bar(position = "dodge") +
ggtitle("Count of Movies by Rating and Awards") +
scale_fill_discrete(labels = c("No", "Yes"))
# Create a stacked frequency bar chart
ggplot(
data = movies,
aes(x = Rating, fill = Awards)) +
geom_bar() +
ggtitle("Count of Movies by Rating and Awards") +
scale_fill_discrete(labels = c("No", "Yes"))
# Create a 100% stacked frequency bar chart
ggplot(
data = movies,
aes(x = Rating, fill = Awards)) +
geom_bar(position = "fill") +
ggtitle("Proportion of Movies by Rating and Awards") +
ylab("Proportion of Movies") +
scale_fill_discrete(labels = c("No", "Yes"))
install.packages(c("hexbin", "latticeExtra"))
install.packages("hexbin")
# Create a scatterplot
plot(
x = movies$Runtime,
y = movies$Box.Office,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Create a linear regression model
model <- lm(movies$Box.Office ~ movies$Runtime)
# Draw the linear regression line on the plot
lines(
x = movies$Runtime,
y = model$fitted,
col = "red",
lwd = 3)
# Install hexbin
install.packages("hexbin")
# Load hexbin library
library(hexbin)
# Create a hexagonal binned frequency heatmap
hexbin <- hexbin(
x = movies$Runtime,
y = movies$Box.Office,
xbins = 30,
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
plot(
x = hexbin,
main = "Runtime vs. Box Office Revenue")
# Create a 2D kernel density estimate using
install.packages("MASS")
library(MASS)
# Create a 2d kernel density estimation
density2d <- kde2d(
x = movies$Runtime,
y = movies$Box.Office,
n = 50)
# Create a contour plot of density
contour(
x = density2d$x,
y = density2d$y,
z = density2d$z,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Create a level plot of density
image(
x = density2d$x,
y = density2d$y,
z = density2d$z,
col = topo.colors(100),
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Create mesh plot of density
persp(
x = density2d$x,
y = density2d$y,
z = density2d$z,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)",
zlab = "Density")
# Create surface plot of density
palette(topo.colors(100))
persp(
x = density2d$x,
y = density2d$y,
z = density2d$z,
col = cut(density2d$z, 100),
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)",
zlab = "Density")
palette("default")
# Load time series data
timeSeries <- read.csv("Timeseries.csv")
# Display the time series data
head(timeSeries)
# Create a step chart
plot(
x = timeSeries,
type = "s",
ylim = c(0, max(timeSeries$Box.Office)),
main = "Average Box Office Revenue by Year",
xlab = "Year",
ylab = "Box Office ($M)")
# Create a line chart
plot(
x = timeSeries,
type = "l",
ylim = c(0, max(timeSeries$Box.Office)),
main = "Average Box Office Revenue by Year",
xlab = "Year",
ylab = "Box Office ($M)")
# Create a scatterplot
xyplot(
x = Box.Office ~ Runtime,
data = movies,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Add a linear regression line
xyplot(
x = Box.Office ~ Runtime,
data = movies,
type = c("p", "r"),
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Load hexbin library
library(hexbin)
# Create hexagonal binned frequency heatmap
hexbinplot(
x =  Box.Office ~ Runtime,
data = movies,
xbins = 30,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Create a grid from our 2D kernel density estimate
grid <- expand.grid(
x = density2d$x,
y = density2d$y)
grid$z <- as.vector(density2d$z)
# Display the data frame
head(grid)
# Create a contour plot of density
contourplot(
x = z ~ x * y,
data = grid,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Create a level plot of density
levelplot(
x = z ~ x * y,
data = grid,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)")
# Create mesh plot of density
wireframe(
x = z ~ x * y,
data = grid,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)",
zlab = "Density")
# Create surface plot of density
wireframe(
x = z ~ x * y,
data = grid,
drape = TRUE,
main = "Runtime vs. Box Office Revenue",
xlab = "Runtime (minutes)",
ylab = "Box Office ($M)",
zlab = "Density")
# Create a step chart
xyplot(
x = Box.Office ~ Year,
data = timeSeries,
type = "s",
ylim = c(0, max(timeSeries$Box.Office)),
main = "Average Box Office Revenue by Year",
xlab = "Year",
ylab = "Box Office ($M)")
# Create a line chart
xyplot(
x = Box.Office ~ Year,
data = timeSeries,
type = "l",
ylim = c(0, max(timeSeries$Box.Office)),
main = "Average Box Office Revenue by Year",
xlab = "Year",
ylab = "Box Office ($M)")
# Download, install and load Lattice Extra package
install.packages("latticeExtra")
library(latticeExtra)
# Create an area chart
xyplot(
x = Box.Office ~ Year,
data = timeSeries,
panel = panel.xyarea,
ylim = c(0, max(timeSeries$Box.Office)),
main = "Average Box Office Revenue by Year",
xlab = "Year",
ylab = "Box Office ($M)")
# Create scatterplot
ggplot(
data = movies,
aes(x = Runtime, y = Box.Office)) +
geom_point() +
ggtitle("Runtime vs. Box Office Revenue") +
xlab("Runtime (minutes)") +
ylab("Box Office ($M)")
# Add a linear regression line
ggplot(
data = movies,
aes(x = Runtime, y = Box.Office)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Runtime vs. Box Office Revenue") +
xlab("Runtime (minutes)") +
ylab("Box Office ($M)")
# Create a frequency heatmap
ggplot(
data = movies,
aes(x = Runtime, y = Box.Office)) +
stat_bin2d() +
ggtitle("Runtime vs. Box Office Revenue") +
xlab("Runtime (minutes)") +
ylab("Box Office ($M)")
# Create a hexagonal binned frequency heatmap
ggplot(
data = movies,
aes(x = Runtime, y = Box.Office)) +
stat_binhex() +
ggtitle("Runtime vs. Box Office Revenue") +
xlab("Runtime (minutes)") +
ylab("Box Office ($M)")
# Create a contour plot of density
ggplot(
data = movies,
aes(x = Runtime, y = Box.Office)) +
geom_density2d() +
ggtitle("Runtime vs. Box Office Revenue") +
xlab("Runtime (minutes)") +
ylab("Box Office ($M)")
# Create a level plot of density
ggplot(
data = movies,
aes(x = Runtime, y = Box.Office)) +
stat_density2d(aes(fill = ..level..), geom = "polygon") +
ggtitle("Runtime vs. Box Office Revenue") +
xlab("Runtime (minutes)") +
ylab("Box Office ($M)")
# Create a step chart
ggplot(
data = timeSeries,
aes(x = Year, y = Box.Office)) +
geom_step() +
expand_limits(y = 0) +
ggtitle("Box Office Revenue by Year") +
xlab("Year") +
ylab("Box Office ($M)")
# Create a line chart
ggplot(
data = timeSeries,
aes(x = Year, y = Box.Office)) +
geom_line() +
expand_limits(y = 0) +
ggtitle("Average Box Office Revenue by Year") +
xlab("Year") +
ylab("Box Office ($M)")
# Create an area chart
ggplot(
data = timeSeries,
aes(x = Year, y = Box.Office)) +
geom_area() +
ggtitle("Average Box Office Revenue by Year") +
xlab("Year") +
ylab("Box Office ($M)")
# Create a bivariate bar graph
average <- tapply(
movies$Box.Office,
movies$Rating,
mean)
print(average)
barplot(
height = average,
main = "Average Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Create a bivariate box plot
plot(
x = movies$Rating,
y = movies$Box.Office,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Create a notched box plot
plot(
x = movies$Rating,
y = movies$Box.Office,
notch = TRUE,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Download, install, and load the dplyr package
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# Create table of average box office by rating
average <- movies %>%
select(Rating, Box.Office) %>%
group_by(Rating) %>%
summarize(Box.Office = mean(Box.Office)) %>%
as.data.frame()
print(average)
# Create a bivariate bar chart
barchart(
x = Box.Office ~ Rating,
data = average,
main = "Average Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Create a bivariate box plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Create a bivariate box plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Create a notched box plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
notch = TRUE,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Create a violin plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
panel = panel.violin,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
# Create a bivariate bar chart
ggplot(
data = average,
aes(x = Rating, y = Box.Office)) +
geom_bar(stat = "identity") +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# Create a bivariate box plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_boxplot() +
ggtitle("Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# Create a notched box plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_boxplot(notch = TRUE) +
ggtitle("Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# Create a violin plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_violin() +
ggtitle("Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# Create a frequency bar chart with defaults
plot(movies$Rating)
# Add context to our bar chart
plot(
x = movies$Rating,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
# Create a color palette
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
palette <- brewer.pal(9, "Pastel1")
# Clean up our bar chart
plot(
x = movies$Rating,
col = palette[2],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
# Clean up our bar chart
plot(
x = movies$Rating,
col = palette[2],
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
plot
plot
plot(
x = movies$Rating,
col = palette[2],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
# Save as a PNG image
png(
filename = "Count of Movies by Rating.png",
width = 640,
height = 480)
plot(
x = movies$Rating,
col = palette[2],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
dev.off()

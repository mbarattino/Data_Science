setwd("~/R_Data_Science")
movies <- read.table(
file = "Movies.txt",
sep = "\t",
header = TRUE,
quote="\"")
# peek at data
head(movies)
# Load data from tab-delimited file
movies <- read.table(
file = "Movies.txt",
sep = "\t",
header = TRUE,
quote = "\"")
# Load data from tab-delimited file
movies <- read.table(
file = "Movies.txt",
sep = "\t",
header = TRUE,
quote = "\"")
# Peek at data
head(movies)
# Look at column names
names(movies)
# Problem #1: Column Name is incorrect
names(movies)[5]
# Rename variables (i.e. columns)
names(movies)[5] <- "Critic.Score"
# Problem #1 solved
names(movies)
# Problem #2: Missing values
# Count missing values
sum(is.na(movies))
# Inspect rows with missing values
tail(movies)
# Exclude observations with missing values
movies <- na.omit(movies)
# Problem #2 solved
sum(is.na(movies))
# Problem #3 units in runtime column
# Peek at the movie runtime data
head(movies$Runtime)
# NOTE: This next line will throw an error
mean(movies$Runtime)
# Determine the data type
class(movies$Runtime)
# Cast from factor to character string
runtimes <- as.character(movies$Runtime)
head(runtimes)
class(runtimes)
# Eliminate the unit of measure
runtimes <- sub(" min", "", runtimes)
head(runtimes)
# Cast the character string to integer
movies$Runtime <- as.integer(runtimes)
head(movies$Runtime)
class(movies$Runtime)
# Now we can perform mathematical functions
mean(movies$Runtime)
# Problem 4: Box Office uses three units of measure
head(movies$Box.Office)
# Create a function to convert box office revenue
convertBoxOffice <- function(boxOffice)
{
stringBoxOffice <- as.character(boxOffice)
replacedBoxOffice <- gsub("[$|k|M]", "", stringBoxOffice)
numericBoxOffice <- as.numeric(replacedBoxOffice)
if (grepl("M", boxOffice)) {
numericBoxOffice
} else if (grepl("k", boxOffice)){
numericBoxOffice * 0.001
} else {
numericBoxOffice * 0.000001
}
}
# Convert box office to single unit of measure (millions)
movies$Box.Office <- sapply(movies$Box.Office, convertBoxOffice)
# Problem 4 is solved
head(movies$Box.Office)
class(movies$Box.Office)
mean(movies$Box.Office)
# Save data to a CSV file
write.csv(movies, "Movies.csv")
# Set working directory
setwd("C:/Users/student/Documents/R_Data_Science")
# Load CSV data
movies <- read.csv(
file = "Movies.csv",
quote = "\"")
genres <- read.csv(
file = "Genres.csv",
quote = "\"")
# Peek at data
head(movies)
head(genres)
# Univariate statistics for qualitative variables
table(movies$Rating)
table(genres$Genre)
# Analyze the location of a quantitative variable
mean(movies$Runtime)
median(movies$Runtime)
which.max(table(movies$Runtime))
# Analyze the spread of a quantitative variable
min(movies$Runtime)
max(movies$Runtime)
range(movies$Runtime)
diff(range(movies$Runtime))
quantile(movies$Runtime)
quantile(movies$Runtime, 0.25)
quantile(movies$Runtime, 0.90)
IQR(movies$Runtime)
var(movies$Runtime)
sd(movies$Runtime)
# Analyze the shape of a quantitative variable
install.packages("moments")
library(moments)
skewness(movies$Runtime)
kurtosis(movies$Runtime)
plot(density(movies$Runtime))
# Summarize a quantitative variable
summary(movies$Runtime)
# Bivariate statistics for two qualitative variables
table(genres$Genre, genres$Rating)
# Covarience
cov(movies$Runtime, movies$Box.Office)
cov(movies$Critic.Score, movies$Box.Office)
# Correlation coefficients
cor(movies$Runtime, movies$Box.Office)
cor(movies$Critic.Score, movies$Box.Office)
# Bivariate statistics for both a qualitative and quantitative variable
tapply(movies$Box.Office, movies$Rating, mean)
tapply(genres$Box.Office, genres$Genre, mean)
# Summarize entire table
summary(movies)
install.packages("moments")
install.packages("moments")
# Set working directory
setwd("C:/Users/student/Documents/R_Data_Science")
# Load CSV data
movies <- read.csv("Movies.csv", quote = "\"")
genres <- read.csv("Genres.csv", quote = "\"")
# Peek at the data
head(movies)
head(genres)
# Create a bar graph of rating observations
plot(movies$Rating)
# Create a bar graph of rating observations
plot(movies$Rating)
# Create a pie chart of rating observations
pie(table(movies$Rating))
# Create a dot plot of runtime
plot(
x = movies$Runtime,
y = rep(0, nrow(movies)),
ylab = "",
yaxt = "n")
# Create a boxplot of runtime
boxplot(
x = movies$Runtime,
xlab = "Runtime (minutes)",
horizontal = TRUE)
# Create a histogram of runtime
hist(movies$Runtime)
# Create a more course-grain histogram
hist(
x = movies$Runtime,
breaks = 10)
# Create a histogram of runtime
hist(movies$Runtime)
# Create a more course-grain histogram
hist(
x = movies$Runtime,
breaks = 10)
# Create a more fine-grain histogram
hist(
x = movies$Runtime,
breaks = 30)
# Create a density plot of runtime
plot(density(movies$Runtime))
# Add dot plot to base of density plot
points(
x = movies$Runtime,
y = rep(-0.0005, nrow(movies)))
# Create a spineplot of genre and rating
spineplot(
x = genres$Genre,
y = genres$Rating)
# Create a mosaic plot of genre and rating
mosaicplot(
x = table(
genres$Genre,
genres$Rating),
las = 3)
# Create a mosaic plot of genre and rating
mosaicplot(
x = table(
genres$Genre,
genres$Rating),
las = 0)
# Create a mosaic plot of genre and rating
mosaicplot(
x = table(
genres$Genre,
genres$Rating),
las = 1)
# Create a mosaic plot of genre and rating
mosaicplot(
x = table(
genres$Genre,
genres$Rating),
las = 2)
# Create a mosaic plot of genre and rating
mosaicplot(
x = table(
genres$Genre,
genres$Rating),
las = 3)
# Create a scatterplot of runtime and box office
plot(
x = movies$Runtime,
y = movies$Box.Office)
# Create a scatterplot of critic score and box office
plot(
x = movies$Critic.Score,
y = movies$Box.Office)
# Plot a line graph of count of movies by year
plot(
x = table(movies$Year),
type = "l")
# Create a scatterplot of runtime and box office
plot(
x = movies$Runtime,
y = movies$Box.Office)
# Create a scatterplot of critic score and box office
plot(
x = movies$Critic.Score,
y = movies$Box.Office)
# Plot a line graph of count of movies by year
plot(
x = table(movies$Year),
type = "l")
# Create a bar graph of average box office by rating
barplot(tapply(movies$Box.Office, movies$Rating, mean))
# Create a bar graph of average box office by genre
barplot(
height = tapply(genres$Box.Office, genres$Genre, mean),
las = 3)
# Plot bivariate box plots of box office by rating
plot(
x = movies$Rating,
y = movies$Box.Office)
# Create a scatterplot matrix
plot(movies)
# Create a bar chart with defaults
plot(movies$Rating)
# Create a scatterplot matrix
plot(movies)
# Create a bar chart with defaults
plot(movies$Rating)
# Clean up the bar chart
plot(
x = movies$Rating,
main = "Count of Movies by Rating",
xlab = "Rating Category",
ylab = "Count of Movies",
col = "#b3cde3")
# View help for plots and parameters
?plot
?par
# Load Iris data
data(iris)
# Peek at the data
head(iris)
# Look at unique species
unique(iris$Species)
# Create a scatterplot matrix colored by species
plot(
x = iris[1:4],
col = as.integer(iris$Species))
# View scatterplot of petal length vs width
plot(
x = iris$Petal.Length,
y = iris$Petal.Width)
# Color scatterplot by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
col = as.numeric(iris$Species))
# Create K-means clusters
clusters <- kmeans(
x = iris[, 1:4],
centers = 3,
nstart = 10)
# Plot each cluster as a shape
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
col = as.numeric(iris$Species),
pch = clusters$cluster)
# Plot centroid of clusters
points(
x = clusters$centers[, "Petal.Length"],
y = clusters$centers[, "Petal.Width"],
pch = 4,
lwd = 4,
col = "blue")
# View a table of the clusters
table(
x = clusters$cluster,
y = iris$Species)
# Load Iris data
data(iris)
# Peek at the data
head(iris)
# Look at unique species
unique(iris$Species)
# Create scatterplot matrix
plot(iris[1:4])
# Create a scatterplot of petal length vs width
plot(
x = iris$Petal.Length,
y = iris$Petal.Width)
# Create a linear regression model
x <- iris$Petal.Length
y <- iris$Petal.Width
model <- lm(y ~ x)
# Draw linear regression model on plot
lines(
x = iris$Petal.Length,
y = model$fitted,
col = "red",
lwd = 3)
# Get correlation coefficient
cor(
x = iris$Petal.Length,
y = iris$Petal.Width)
# Summarize the model
summary(model)
# Predict new unknown values from the model
predict(
object = model,
newdata = data.frame(x = c(2, 5, 7)))
# Peek at the data
head(iris)
# Look at unique species
unique(iris$Species)
# Create a scatterplot matrix colored by species
plot(
x = iris[1:4],
col = as.integer(iris$Species))
# View scatterplot of petal length vs width
plot(
x = iris$Petal.Length,
y = iris$Petal.Width)
# Color scatterplot by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
col = as.numeric(iris$Species))
# Create K-means clusters
clusters <- kmeans(
x = iris[, 1:4],
centers = 3,
nstart = 10)
# Plot each cluster as a shape
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
col = as.numeric(iris$Species),
pch = clusters$cluster)
# Plot centroid of clusters
points(
x = clusters$centers[, "Petal.Length"],
y = clusters$centers[, "Petal.Width"],
pch = 4,
lwd = 4,
col = "blue")
# View a table of the clusters
table(
x = clusters$cluster,
y = iris$Species)
